import axios from 'axios'
import React, { useEffect } from 'react'
import { useRouter } from 'next/router'
import Head from 'next/head'
import { useDispatch, useSelector } from 'react-redux'
import {
  getMessages,
  getUsersMessages,
} from '../../services/features/messages/messageSlice'
import { getUsers } from '../../services/features/users/usersSlice'
import { AppDispatch } from '../../services/store'
import RoomAside from '../../components/RoomAside'
import AsideUsers from '../../components/AsideUsers'
import ChatForm from '../../components/ChatForm'
import ChatItems from '../../components/ChatItems'
import ChatHeader from '../../components/ChatHeader'
import { io } from 'socket.io-client'
import Message from '../../components/skeleton/Message'
import { iUser } from '../../utils/types'

const Messages = () => {
  const dispatch = useDispatch<AppDispatch>()
  const router = useRouter()
  const { isLoading, isError } = useSelector((state: any) => state.messages)
  const { contact } = useSelector((state: any) => state.contact)

  useEffect(() => {
    console.log(contact)
    if (!contact) router.replace('/')
  }, [contact])

  useEffect(() => {
    const socket = io(process.env.NEXT_PUBLIC_BACKEND_URI!)

    if (!contact) router.replace('/')
    else {
      socket.on('messages', (data) => {
        if (data.action == 'create') {
          dispatch(getMessages(contact && contact?._id))
        }
      })
    }
  }, [dispatch, contact])

  return (
    <>
      <Head>
        <title>Crypto chat</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <main className='fixed top-0 bottom-0 left-0 right-0 flex bg-gray-200 flex-column '>
        {/* <RoomAside /> */}
        <AsideUsers />
        {/* Main messages */}
        <div className='relative flex flex-col w-full p-0 m-0'>
          <div className='absolute top-0 bottom-0 left-0 right-0 flex flex-col p-0 m-0 bg-gray-100 rounded-xl sm:m-2'>
            {/* header */}
            <ChatHeader />

            {/* display messages */}
            {isLoading ? (
              <Message />
            ) : (
              <>
                <ChatItems />
              </>
            )}

            {/* send message input */}
            <ChatForm />
          </div>
        </div>
      </main>
    </>
  )
}

export default Messages
